{"version":3,"file":"pullcraft.test.js","sourceRoot":"","sources":["pullcraft.test.ts"],"names":[],"mappings":"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","sourcesContent":["// import { describe, it, beforeEach, afterEach } from 'node:test';\nimport { expect } from 'chai';\nimport { describe, it } from 'mocha';\nimport nock from 'nock'; // Change this line\n\nimport * as sinon from 'sinon';\nimport PullCraft from '../src/index';\nimport childProcess from 'child_process';\n\nimport fs from 'fs';\n\nimport * as chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nchai.use(chaiAsPromised);\n\ndelete process.env.OPENAI_API_KEY;\ndelete process.env.GITHUB_TOKEN;\n\nasync function testErrorHandling (\n  fn: () => Promise<any>,\n  expectedErrorMessage: any,\n  consoleErrorStub: sinon.SinonStub\n) {\n  try {\n    await fn();\n    throw new Error('Function did not throw');\n  } catch (error: any) {\n    expect(error.message).to.equal(expectedErrorMessage);\n    expect(consoleErrorStub.calledOnce).to.equal(true);\n  }\n}\n\ndescribe('PullCraft', () => {\n  let pullCraft: PullCraft;\n  let openaiStub: sinon.SinonStub;\n  let openUrlStub: sinon.SinonStub;\n  let gitStub: sinon.SinonStub;\n  let createPullStub: sinon.SinonStub;\n  let listPullsStub: sinon.SinonStub;\n  let updatePullStub: sinon.SinonStub;\n  let execStub: sinon.SinonStub;\n  let consoleErrorStub: sinon.SinonStub;\n  // let consoleWarnStub: sinon.SinonStub;\n  let consoleLogStub: sinon.SinonStub;\n\n  beforeEach(() => {\n    pullCraft = new PullCraft({\n      openai: { apiKey: 'fake-openai-api-key' },\n      githubToken: 'fake-github-token'\n    });\n    openaiStub = sinon.stub(pullCraft.openai.chat.completions, 'create');\n    // openUrlStub = sinon.stub(pullCraft,'openUrl').resolves({} as ChildProcess);\n    createPullStub = sinon.stub(pullCraft.gitHubClient, 'createPull');\n    listPullsStub = sinon.stub(pullCraft.gitHubClient, 'listPulls');\n    updatePullStub = sinon.stub(pullCraft.gitHubClient, 'updatePull');\n    execStub = sinon.stub(childProcess, 'exec');\n    consoleErrorStub = sinon.stub(console, 'error');\n    // consoleWarnStub = sinon.stub(console, 'warn');\n    consoleLogStub = sinon.stub(console, 'log');\n  });\n\n  afterEach(() => {\n    sinon.restore();\n    nock.cleanAll();\n    consoleErrorStub.restore();\n    // consoleWarnStub.restore();\n    consoleLogStub.restore();\n  });\n\n  describe('Constructor', () => {\n    it('should throw an error if OPENAI_API_KEY is not set', () => {\n      expect(() => new PullCraft({ githubToken: 'fake-github-token' })).to.throw('Error: OPENAI_API_KEY is not set');\n    });\n\n    it('should throw an error if GITHUB_TOKEN is not set', () => {\n      expect(() => new PullCraft({ openai: { apiKey: 'fake-openai-api-key' }, githubStrategy: 'octokit' })).to.throw('Error: GITHUB_TOKEN is not set');\n    });\n\n    it('should throw an error for invalid githubStrategy', () => {\n      expect(() => new PullCraft({\n        openai: { apiKey: 'fake-key' },\n        githubToken: 'fake-token',\n        githubStrategy: 'invalid'\n      })).to.throw('Error: githubStrategy must be \\'gh\\' or \\'octokit\\'. Defaults to \\'gh\\'.');\n    });\n  });\n\n  describe('replacePlaceholders', () => {\n    it('should replace a single placeholder in the template string', () => {\n      const template = 'Hello, __name__!';\n      const replacements = { name: 'World' };\n      const result = pullCraft.replacePlaceholders(template, replacements);\n      expect(result).to.equal('Hello, World!');\n    });\n\n    it('should replace multiple placeholders in the template string', () => {\n      const template = 'Hello, __name__! Welcome to __place__.';\n      const replacements = { name: 'Alice', place: 'Wonderland' };\n      const result = pullCraft.replacePlaceholders(template, replacements);\n      expect(result).to.equal('Hello, Alice! Welcome to Wonderland.');\n    });\n\n    it('should handle placeholders with different patterns', () => {\n      const template = 'Hello, {{name}}!';\n      const replacements = { name: 'Bob' };\n      const result = pullCraft.replacePlaceholders(template, replacements, '{{KEY}}');\n      expect(result).to.equal('Hello, Bob!');\n    });\n\n    it('should not replace anything if no placeholders match', () => {\n      const template = 'Hello, __name__!';\n      const replacements = { place: 'World' };\n      const result = pullCraft.replacePlaceholders(template, replacements);\n      expect(result).to.equal('Hello, __name__!');\n    });\n\n    it('should replace placeholders with empty strings if the value is empty', () => {\n      const template = 'Hello, __name__!';\n      const replacements = { name: '' };\n      const result = pullCraft.replacePlaceholders(template, replacements);\n      expect(result).to.equal('Hello, !');\n    });\n\n    it('should leave placeholder alone if replacements are empty', () => {\n      const template = 'Hello, __name__!';\n      const replacements = {};\n      const result = pullCraft.replacePlaceholders(template, replacements);\n      expect(result).to.equal('Hello, __name__!');\n    });\n\n    it('should leave template alone if there are no placeholders', () => {\n      const template = 'Hello, name!';\n      const replacements = {};\n      const result = pullCraft.replacePlaceholders(template, replacements);\n      expect(result).to.equal('Hello, name!');\n    });\n  });\n\n  describe('openUrl', () => {\n    let platformStub: sinon.SinonStub;\n    beforeEach(() => {\n      platformStub = sinon.stub(process, 'platform');\n    });\n\n    afterEach(() => {\n      platformStub.restore();\n    });\n\n    it('should throw an error when URL is not provided', async () => {\n      await expect(pullCraft.openUrl('')).to.be.rejectedWith('Error: URL is required');\n      expect(consoleErrorStub.calledWith('Error: Please provide a value for the argument.')).to.equal(true);\n    });\n\n    it('should open URL on Linux', async () => {\n      platformStub.value('linux');\n      await pullCraft.openUrl('https://example.com');\n      expect(execStub.calledWith('xdg-open \"https://example.com\"')).to.equal(true);\n      expect(consoleLogStub.calledWith('Opening URL: https://example.com on linux')).to.equal(true);\n    });\n\n    it('should open URL on macOS', async () => {\n      platformStub.value('darwin');\n      await pullCraft.openUrl('https://example.com');\n      expect(execStub.calledWith('open \"https://example.com\"')).to.equal(true);\n      expect(consoleLogStub.calledWith('Opening URL: https://example.com on darwin')).to.equal(true);\n    });\n\n    it('should open URL on Windows', async () => {\n      platformStub.value('win32');\n      await pullCraft.openUrl('https://example.com');\n      expect(execStub.calledWith('start \"https://example.com\"')).to.equal(true);\n      expect(consoleLogStub.calledWith('Opening URL: https://example.com on win32')).to.equal(true);\n    });\n\n    it('should log error for unsupported OS', async () => {\n      platformStub.value('freebsd');\n      await pullCraft.openUrl('https://example.com');\n      expect(consoleErrorStub.calledWith('Unsupported OS')).to.equal(true);\n    });\n\n    it('should not open URL if openPr is false', async () => {\n      pullCraft.openPr = false;\n      await pullCraft.openUrl('http://example.com');\n      expect(execStub.called).to.equal(false);\n    });\n\n    it('should handle unsupported OS', async () => {\n      const originalPlatform = process.platform;\n      Object.defineProperty(process, 'platform', { value: 'unsupported' });\n\n      await pullCraft.openUrl('http://example.com');\n\n      expect(consoleErrorStub.calledWith('Unsupported OS')).to.equal(true);\n      Object.defineProperty(process, 'platform', { value: originalPlatform });\n    });\n\n    it('should handle error when opening URL', async () => {\n      execStub.throws(new Error('Failed to open URL'));\n\n      try {\n        await pullCraft.openUrl('http://example.com');\n      } catch (error: any) {\n        expect(error.message).to.equal('Failed to open URL');\n      }\n\n      expect(consoleErrorStub.calledOnce).to.equal(true);\n      expect(consoleErrorStub.args[0][0]).to.equal('Error opening URL: Failed to open URL');\n    });\n  });\n\n  describe('getRepoInfo', () => {\n    it('should get repository info with ssh', async () => {\n      sinon.stub(pullCraft.git, 'raw').resolves('git@github.com:owner/repo.git\\n');\n      const repoInfo = await pullCraft.getRepoInfo();\n      expect(repoInfo).to.deep.equal({ owner: 'owner', repo: 'repo' });\n    });\n\n    it('should get repository info with https', async () => {\n      sinon.stub(pullCraft.git, 'raw').resolves('https://github.com/owner/repo\\n');\n      const repoInfo = await pullCraft.getRepoInfo();\n      expect(repoInfo).to.deep.equal({ owner: 'owner', repo: 'repo' });\n    });\n\n    it('should throw an error for invalid repo URL', async () => {\n      sinon.stub(pullCraft.git, 'raw').resolves('invalid-url');\n      await expect(pullCraft.getRepoInfo()).to.be.rejectedWith('Failed to get repo info from invalid-url');\n    });\n  });\n\n  describe('getNewFiles', () => {\n    it('should get new files', async () => {\n      const gitStub = sinon.stub(pullCraft.git, 'raw');\n\n      // Stub for the first call to get new filenames\n      gitStub.onFirstCall().resolves('file1.txt\\nfile2.txt\\n');\n\n      // Stubs for subsequent calls to get file diffs\n      gitStub.onSecondCall().resolves('diff --git a/file1.txt b/file1.txt\\n...');\n      gitStub.onThirdCall().resolves('diff --git a/file2.txt b/file2.txt\\n...');\n\n      const result = await pullCraft.getNewFiles('develop', 'feature-branch');\n\n      expect(gitStub.getCall(0).args[0]).to.deep.equal(['diff', '--name-only', '--diff-filter=A', 'develop', 'feature-branch']);\n\n      expect(gitStub.getCall(1).args[0]).to.deep.equal(['diff', 'develop', 'feature-branch', '--', 'file1.txt']);\n\n      expect(gitStub.getCall(2).args[0]).to.deep.equal(['diff', 'develop', 'feature-branch', '--', 'file2.txt']);\n\n      expect(result).to.equal(\n        'diff --git a/file1.txt b/file1.txt\\n...diff --git a/file2.txt b/file2.txt\\n...'\n      );\n    });\n    it('should handle large files', async () => {\n      const gitStub = sinon.stub(pullCraft.git, 'raw');\n\n      gitStub.onFirstCall().resolves('large_file.txt\\n');\n\n      // Simulate a large file diff\n      const largeDiff = 'diff\\n'.repeat(pullCraft.diffThreshold + 1);\n      gitStub.onSecondCall().resolves(largeDiff);\n\n      const result = await pullCraft.getNewFiles('develop', 'feature-branch');\n\n      expect(result).to.include('File large_file.txt is too large to display in the diff. Skipping.');\n    });\n\n    it('should handle error when getting new files', async () => {\n      const errorMessage = 'Failed to get new files';\n      const gitStub = sinon.stub(pullCraft.git, 'raw').rejects(new Error(errorMessage));\n\n      await expect(pullCraft.getNewFiles('develop', 'feature-branch')).to.be.rejectedWith(errorMessage);\n      expect(consoleErrorStub.calledOnce).to.equal(true);\n    });\n\n    it('should handle large new files', async () => {\n      const gitStub = sinon.stub(pullCraft.git, 'raw');\n      gitStub.onFirstCall().resolves('large_file.txt\\n');\n      gitStub.onSecondCall().resolves('a\\n'.repeat(pullCraft.diffThreshold + 1));\n\n      const result = await pullCraft.getNewFiles('develop', 'feature-branch');\n\n      expect(result).to.include('File large_file.txt is too large to display in the diff. Skipping.');\n    });\n  });\n\n  describe('getModifiedFiles', () => {\n    it('should get diff for modified files between branches', async () => {\n      const baseBranch = 'main';\n      const compareBranch = 'feature';\n      const modifiedFilenamesOutput = 'file1.txt\\nfile2.txt\\n';\n      const diffOutput1 = 'diff --git a/file1.txt b/file1.txt\\nindex 83db48f..f735c2d 100644\\n--- a/file1.txt\\n+++ b/file1.txt\\n@@ -1 +1 @@\\n-Hello\\n+Hello World\\n';\n      const diffOutput2 = 'diff --git a/file2.txt b/file2.txt\\nindex 83db48f..f735c2d 100644\\n--- a/file2.txt\\n+++ b/file2.txt\\n@@ -1 +1 @@\\n-Goodbye\\n+Goodbye World\\n';\n\n      const gitStub = sinon.stub(pullCraft.git, 'raw');\n      gitStub.onCall(0).resolves(modifiedFilenamesOutput);\n      gitStub.onCall(1).resolves(diffOutput1);\n      gitStub.onCall(2).resolves(diffOutput2);\n\n      const result = await pullCraft.getModifiedFiles(baseBranch, compareBranch);\n\n      expect(result).to.equal(diffOutput1 + diffOutput2);\n      expect(gitStub.callCount).to.equal(3);\n      expect(gitStub.getCall(0).args[0]).to.deep.equal(['diff', '--name-only', '--diff-filter=M', baseBranch, compareBranch]);\n      expect(gitStub.getCall(1).args[0]).to.deep.equal(['diff', baseBranch, compareBranch, '--', 'file1.txt']);\n      expect(gitStub.getCall(2).args[0]).to.deep.equal(['diff', baseBranch, compareBranch, '--', 'file2.txt']);\n    });\n\n    it('should skip files over diffThreshold lines', async () => {\n      const baseBranch = 'main';\n      const compareBranch = 'feature';\n      const modifiedFilenamesOutput = 'file1.txt\\nfile2.txt\\n';\n      const shortDiffOutput = 'Short diff';\n      const longDiffOutput = 'a\\n'.repeat(pullCraft.diffThreshold + 1);\n\n      const gitStub = sinon.stub(pullCraft.git, 'raw');\n      gitStub.onCall(0).resolves(modifiedFilenamesOutput);\n      gitStub.onCall(1).resolves(shortDiffOutput);\n      gitStub.onCall(2).resolves(longDiffOutput);\n\n      let capturedLog = '';\n      consoleLogStub.callsFake((message) => {\n        capturedLog = message;\n      });\n\n      const result = await pullCraft.getModifiedFiles(baseBranch, compareBranch);\n\n      expect(result).to.equal(shortDiffOutput + '\\n\\n\\nFile file2.txt is too large to display in the diff. Skipping.\\n\\n\\n');\n      expect(capturedLog).to.equal('File file2.txt is too large to display in the diff. Skipping.');\n    });\n\n    it('should handle errors', async () => {\n      const baseBranch = 'main';\n      const compareBranch = 'feature';\n      const errorMessage = 'Error getting modified files';\n\n      const gitStub = sinon.stub(pullCraft.git, 'raw');\n      gitStub.rejects(new Error(errorMessage));\n\n      await expect(pullCraft.getModifiedFiles(baseBranch, compareBranch)).to.be.rejectedWith(errorMessage);\n      expect(consoleErrorStub.calledOnce).to.equal(true);\n    });\n    it('should handle large files', async () => {\n      pullCraft.diffThreshold = 5;\n      sinon.stub(pullCraft.git, 'raw')\n        .onFirstCall().resolves('file1\\nfile2')\n        .onSecondCall().resolves('1\\n2\\n3\\n4\\n5\\n6')\n        .onThirdCall().resolves('1\\n2\\n3\\n4');\n\n      const result = await pullCraft.getModifiedFiles('base', 'compare');\n\n      expect(result).to.include('File file1 is too large to display in the diff');\n      expect(result).to.include('1\\n2\\n3\\n4');\n    });\n  });\n\n  describe('getFilenames', () => {\n    it('should get filenames between branches', async () => {\n      const baseBranch = 'main';\n      const compareBranch = 'feature';\n      const filenamesOutput = 'file1.txt\\nfile2.txt\\n';\n      const gitStub = sinon.stub(pullCraft.git, 'raw').resolves(filenamesOutput);\n      const filenames = await pullCraft.getFilenames(baseBranch, compareBranch);\n      expect(filenames).to.equal(filenamesOutput);\n    });\n\n    it('should handle errors', async () => {\n      const baseBranch = 'main';\n      const compareBranch = 'feature';\n      const errorMessage = 'Error getting filenames';\n      const gitStub = sinon.stub(pullCraft.git, 'raw').rejects(new Error(errorMessage));\n      await expect(pullCraft.getFilenames(baseBranch, compareBranch)).to.be.rejectedWith(errorMessage);\n      expect(consoleErrorStub.calledOnce).to.equal(true);\n    });\n  });\n\n  describe('gptCall', () => {\n    it('should call OpenAI API', async () => {\n      const content = JSON.stringify({ body: 'PR body', title: 'PR title' });\n      openaiStub.resolves({ choices: [{ message: { content } }] });\n      const response = await pullCraft.gptCall('prompt');\n      expect(response).to.equal(content);\n      expect(openaiStub.calledOnce).to.equal(true);\n    });\n\n    it('should handle error when calling OpenAI API', async () => {\n      openaiStub.rejects(new Error('Failed to call OpenAI API'));\n      const response = await pullCraft.gptCall('prompt');\n      expect(response).to.equal(undefined);\n      expect(openaiStub.calledOnce).to.equal(true);\n    });\n\n    it('should include hint in system prompt when provided', async () => {\n      openaiStub.resolves({ choices: [{ message: { content: '{\"title\":\"Test Title\",\"body\":\"Test Body\"}' } }] });\n      pullCraft.hint = 'This is a test hint';\n\n      await pullCraft.gptCall('Test prompt');\n\n      expect(openaiStub.calledOnce).to.equal(true);\n      const callArgs = openaiStub.firstCall.args[0];\n      expect(callArgs.messages[0].content).to.include('This is a test hint');\n    });\n  });\n\n  describe('differ', () => {\n    it('should return response with exit true when there are no differences', async () => {\n      // Setup stubs to simulate no differences\n      const gitStub = sinon.stub(pullCraft.git, 'revparse').resolves('feature-branch\\n');\n      const getDiffStub = sinon.stub(pullCraft, 'getModifiedFiles').resolves('');\n      const getNewFilesStub = sinon.stub(pullCraft, 'getNewFiles').resolves('');\n      const getFilenamesStub = sinon.stub(pullCraft, 'getFilenames').resolves('');\n\n      const result = await pullCraft.differ('develop', 'feature-branch');\n      expect(result).to.deep.equal({\n        response: 'No changes found between the specified branches.',\n        exit: true\n      });\n    });\n\n    it('should return GPT response when there are changes', async () => {\n      // Setup stubs to simulate differences\n      const gitStub = sinon.stub(pullCraft.git, 'revparse').resolves('feature-branch\\n');\n      const getDiffStub = sinon.stub(pullCraft, 'getModifiedFiles').resolves('some diff');\n      const getNewFilesStub = sinon.stub(pullCraft, 'getNewFiles').resolves('newFile.js');\n      const getFilenamesStub = sinon.stub(pullCraft, 'getFilenames').resolves('file1.js\\nfile2.js');\n      const buildTextPromptStub = sinon.stub(pullCraft, 'buildTextPrompt').returns('prompt');\n      const gptCallStub = sinon.stub(pullCraft, 'gptCall').resolves('GPT response');\n\n      const result = await pullCraft.differ('develop', 'feature-branch');\n      expect(result).to.deep.equal({\n        response: 'GPT response',\n        exit: false\n      });\n    });\n\n    it('should handle dumpTo option', async () => {\n      // Setup stubs and temporary dumpTo option\n      const gitStub = sinon.stub(pullCraft.git, 'revparse').resolves('feature-branch\\n');\n      const getDiffStub = sinon.stub(pullCraft, 'getModifiedFiles').resolves('some diff');\n      const getNewFilesStub = sinon.stub(pullCraft, 'getNewFiles').resolves('newFile.js');\n      const getFilenamesStub = sinon.stub(pullCraft, 'getFilenames').resolves('file1.js\\nfile2.js');\n      const dumpStub = sinon.stub(pullCraft, 'dump');\n\n      pullCraft.dumpTo = 'test-dump.txt';\n\n      const result = await pullCraft.differ('develop', 'feature-branch');\n      expect(result).to.deep.equal({\n        response: 'Diff dumped to test-dump.txt',\n        exit: true\n      });\n      expect(dumpStub.calledOnce).to.equal(true);\n\n      // Reset dumpTo option\n      pullCraft.dumpTo = '';\n    });\n\n    it('should handle errors and log them', async () => {\n      const gitStub = sinon.stub(pullCraft.git, 'revparse').throws(new Error('revparse error'));\n\n      const result = await pullCraft.differ('develop');\n      expect(result).to.equal(undefined);\n      expect(consoleErrorStub.calledWith('Error generating PR body: revparse error')).to.equal(true);\n    });\n\n    it('should include hint in GPT response when provided', async () => {\n      const gitStub = sinon.stub(pullCraft.git, 'revparse').resolves('feature-branch\\n');\n      const getDiffStub = sinon.stub(pullCraft, 'getModifiedFiles').resolves('some diff');\n      const getNewFilesStub = sinon.stub(pullCraft, 'getNewFiles').resolves('newFile.js');\n      const getFilenamesStub = sinon.stub(pullCraft, 'getFilenames').resolves('file1.js\\nfile2.js');\n      const buildTextPromptStub = sinon.stub(pullCraft, 'buildTextPrompt').returns('prompt with hint');\n      const gptCallStub = sinon.stub(pullCraft, 'gptCall').resolves('GPT response with hint');\n\n      pullCraft.hint = 'This is a hint';\n\n      const result = await pullCraft.differ('develop', 'feature-branch');\n      expect(result).to.deep.equal({\n        response: 'GPT response with hint',\n        exit: false\n      });\n      expect(buildTextPromptStub.calledWith(sinon.match.any)).to.equal(true);\n\n      // Reset hint\n      pullCraft.hint = '';\n    });\n    it('should return early if dumpTo is set', async () => {\n      const gitStub = sinon.stub(pullCraft.git);\n      gitStub.revparse.resolves('feature-branch');\n\n      const getModifiedFilesStub = sinon.stub(pullCraft, 'getModifiedFiles').resolves('modified content');\n      const getNewFilesStub = sinon.stub(pullCraft, 'getNewFiles').resolves('new content');\n      const getFilenamesStub = sinon.stub(pullCraft, 'getFilenames').resolves('modified-file.txt\\nnew-file.txt');\n      const dumpStub = sinon.stub(pullCraft, 'dump');\n\n      pullCraft.dumpTo = 'dump.txt';\n\n      const result = await pullCraft.differ('develop');\n\n      expect(result).to.deep.equal({ response: 'Diff dumped to dump.txt', exit: true });\n      expect(dumpStub.calledOnce).to.equal(true);\n\n      const dumpContent = dumpStub.firstCall.args[0];\n      expect(dumpContent).to.equal('modified content');\n      expect(dumpContent).to.not.include('new content');\n      expect(dumpContent).to.not.include('modified-file.txt\\nnew-file.txt');\n\n      expect(getModifiedFilesStub.calledOnce).to.equal(true);\n      expect(getNewFilesStub.calledOnce).to.equal(true);\n      expect(getFilenamesStub.calledOnce).to.equal(true);\n\n      pullCraft.dumpTo = '';\n\n      // Restore the original methods\n      getModifiedFilesStub.restore();\n      getNewFilesStub.restore();\n      getFilenamesStub.restore();\n    });\n  });\n\n  describe('createPr', () => {\n    it('should create or update a pull request', async () => {\n      const content = JSON.stringify({ body: 'PR body', title: 'PR title' });\n      const gitStub = sinon.stub(pullCraft.git, 'revparse').resolves('feature-branch\\n');\n      const differStub = sinon.stub(pullCraft, 'differ').resolves({ response: content, exit: false });\n      const getRepoInfoStub = sinon.stub(pullCraft, 'getRepoInfo').resolves({ owner: 'owner', repo: 'repo' });\n      listPullsStub.resolves([]);\n      createPullStub.resolves({ data: { html_url: 'http://example.com' } });\n      const openUrlStub = sinon.stub(pullCraft, 'openUrl').resolves();\n\n      await pullCraft.createPr('develop');\n\n      expect(gitStub.calledOnceWith(['--abbrev-ref', 'HEAD'])).to.equal(true);\n      expect(differStub.calledOnceWith('develop', 'feature-branch')).to.equal(true);\n      expect(getRepoInfoStub.calledOnce).to.equal(true);\n      expect(listPullsStub.calledOnceWith({ owner: 'owner', repo: 'repo', head: 'feature-branch', base: 'develop' })).to.equal(true);\n      expect(createPullStub.calledOnceWith({\n        owner: 'owner',\n        repo: 'repo',\n        title: 'PR title',\n        body: 'PR body',\n        base: 'develop',\n        head: 'feature-branch'\n      })).to.equal(true);\n      expect(openUrlStub.calledOnceWith('http://example.com')).to.equal(true);\n    });\n\n    it('should handle error when creating or updating a pull request', async () => {\n      const gitStub = sinon.stub(pullCraft.git, 'revparse').rejects(new Error('Failed to get current branch'));\n      const differStub = sinon.stub(pullCraft, 'differ').resolves({ response: 'PR body', exit: false });\n      const getRepoInfoStub = sinon.stub(pullCraft, 'getRepoInfo').resolves({ owner: 'owner', repo: 'repo' });\n      listPullsStub.resolves([]);\n      createPullStub.resolves({ url: 'http://example.com' });\n\n      await pullCraft.createPr('develop');\n\n      expect(consoleErrorStub.calledOnceWith('Error creating PR: Failed to get current branch')).to.equal(true);\n    });\n\n    it('should include hint in PR creation when provided', async () => {\n      const content = JSON.stringify({ body: 'PR body with hint', title: 'PR title' });\n      const gitStub = sinon.stub(pullCraft.git, 'revparse').resolves('feature-branch\\n');\n      const differStub = sinon.stub(pullCraft, 'differ').resolves({ response: content, exit: false });\n      const getRepoInfoStub = sinon.stub(pullCraft, 'getRepoInfo').resolves({ owner: 'owner', repo: 'repo' });\n      listPullsStub.resolves([]);\n      createPullStub.resolves({ data: { html_url: 'http://example.com' } });\n      const openUrlStub = sinon.stub(pullCraft, 'openUrl').resolves();\n\n      pullCraft.hint = 'This is a PR hint';\n\n      await pullCraft.createPr('develop');\n\n      expect(differStub.calledOnceWith('develop', 'feature-branch')).to.equal(true);\n      expect(createPullStub.calledOnceWith({\n        owner: 'owner',\n        repo: 'repo',\n        title: 'PR title',\n        body: 'PR body with hint',\n        base: 'develop',\n        head: 'feature-branch'\n      })).to.equal(true);\n\n      // Reset hint\n      pullCraft.hint = '';\n    });\n\n    it('should handle error when getting repository info', async () => {\n      const gitStub = sinon.stub(pullCraft.git, 'revparse').resolves('feature-branch\\n');\n      const getRepoInfoStub = sinon.stub(pullCraft, 'getRepoInfo').rejects(new Error('Failed to get repo info'));\n\n      await pullCraft.createPr('develop');\n\n      expect(consoleErrorStub.calledOnce).to.equal(true);\n      expect(consoleErrorStub.firstCall.args[0]).to.include('Error creating PR: Failed to get repo info');\n    });\n\n    it('should handle error when parsing AI response', async () => {\n      const gitStub = sinon.stub(pullCraft.git, 'revparse').resolves('feature-branch\\n');\n      const getRepoInfoStub = sinon.stub(pullCraft, 'getRepoInfo').resolves({ owner: 'owner', repo: 'repo' });\n      const differStub = sinon.stub(pullCraft, 'differ').resolves({ response: 'Invalid JSON', exit: false });\n\n      await pullCraft.createPr('develop');\n\n      expect(consoleErrorStub.calledOnce).to.equal(true);\n      expect(consoleErrorStub.firstCall.args[0]).to.include('AI Response could not be parsed');\n    });\n\n    it('should handle missing body in AI response', async () => {\n      const gitStub = sinon.stub(pullCraft.git, 'revparse').resolves('feature-branch\\n');\n      const getRepoInfoStub = sinon.stub(pullCraft, 'getRepoInfo').resolves({ owner: 'owner', repo: 'repo' });\n      const differStub = sinon.stub(pullCraft, 'differ').resolves({ response: JSON.stringify({ title: 'PR Title' }), exit: false });\n\n      await pullCraft.createPr('develop');\n\n      expect(consoleErrorStub.calledOnce).to.equal(true);\n      expect(consoleErrorStub.firstCall.args[0]).to.include('PR body could not be retrieved');\n    });\n\n    it('should handle missing title in AI response', async () => {\n      const gitStub = sinon.stub(pullCraft.git, 'revparse').resolves('feature-branch\\n');\n      const getRepoInfoStub = sinon.stub(pullCraft, 'getRepoInfo').resolves({ owner: 'owner', repo: 'repo' });\n      const differStub = sinon.stub(pullCraft, 'differ').resolves({ response: JSON.stringify({ body: 'PR Body' }), exit: false });\n\n      await pullCraft.createPr('develop');\n\n      expect(consoleErrorStub.calledOnce).to.equal(true);\n      expect(consoleErrorStub.firstCall.args[0]).to.include('PR title could not be retrieved');\n    });\n\n    it('should handle error when differ returns undefined', async () => {\n      const gitStub = sinon.stub(pullCraft.git, 'revparse').resolves('feature-branch\\n');\n      const getRepoInfoStub = sinon.stub(pullCraft, 'getRepoInfo').resolves({ owner: 'owner', repo: 'repo' });\n      const differStub = sinon.stub(pullCraft, 'differ').resolves(undefined);\n\n      await pullCraft.createPr('develop');\n\n      expect(consoleErrorStub.calledOnce).to.equal(true);\n      expect(consoleErrorStub.firstCall.args[0]).to.include('Cannot destructure');\n    });\n    it('should handle case when getRepoInfo returns null', async () => {\n      // @ts-expect-error - testing\n      sinon.stub(pullCraft, 'getRepoInfo').resolves(null);\n\n      await pullCraft.createPr();\n\n      expect(consoleErrorStub.calledOnce).to.equal(true);\n      expect(consoleErrorStub.firstCall.args[0]).to.include('Repository information could not be retrieved');\n    });\n\n    it('should handle case when differ returns exit: true', async () => {\n      sinon.stub(pullCraft, 'getRepoInfo').resolves({ owner: 'owner', repo: 'repo' });\n      sinon.stub(pullCraft, 'differ').resolves({ response: 'No changes', exit: true });\n\n      const result = await pullCraft.createPr();\n\n      expect(result).to.equal(undefined);\n    });\n  });\n\n  describe('dump', () => {\n    it('should dump diff to a file', () => {\n      const fsWriteFileSync = sinon.stub(fs, 'writeFileSync');\n      pullCraft.dumpTo = 'test-dump.txt';\n      pullCraft.dump('Test diff content');\n\n      expect(fsWriteFileSync.calledOnceWith('test-dump.txt', 'Test diff content')).to.equal(true);\n      fsWriteFileSync.restore();\n    });\n  });\n\n  describe('buildTextPrompt', () => {\n    it('should build text prompt with replacements', () => {\n      pullCraft.replacements = { customKey: 'CustomValue' };\n      pullCraft.standardReplacements = { baseBranch: 'main', compareBranch: 'feature' };\n      pullCraft.openaiConfig.titleTemplate = 'PR: __customKey__ from __compareBranch__ to __baseBranch__';\n      pullCraft.openaiConfig.bodyTemplate = 'Changes in __compareBranch__';\n\n      const result = pullCraft.buildTextPrompt({\n        diff: 'Test diff',\n        newFiles: 'New files',\n        filenames: 'file1.txt\\nfile2.txt'\n      });\n\n      expect(result).to.include('PR: CustomValue from feature to main');\n      expect(result).to.include('Changes in feature');\n      expect(result).to.include('Test diff');\n      expect(result).to.include('New files');\n      expect(result).to.include('file1.txt\\nfile2.txt');\n    });\n  });\n\n  describe('isGhCliAvailable', () => {\n    it('should return false when gh CLI is not available', () => {\n      const execSyncStub = sinon.stub(childProcess, 'execSync').throws();\n      const result = pullCraft.isGhCliAvailable();\n      expect(result).to.equal(false);\n      execSyncStub.restore();\n    });\n  });\n});\n"]}