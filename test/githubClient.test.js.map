{"version":3,"file":"githubClient.test.js","sourceRoot":"","sources":["githubClient.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, beforeEach, afterEach } from 'mocha';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\nimport { GitHubClient, OctokitClient, GhClient } from '../src/githubClient';\nimport childProcess from 'child_process';\n\n// chai.use(chaiAsPromised);\n\ndescribe('GitHubClient', () => {\n  describe('Generic Functions', () => {\n    let client: GitHubClient;\n\n    beforeEach(() => {\n      client = new GitHubClient();\n    });\n\n    it('should throw \"Not implemented\" for listPulls', async () => {\n      try {\n        await client.listPulls({ owner: 'test', repo: 'test', base: 'main', head: 'feature' });\n        expect.fail('Expected method to throw');\n      } catch (error) {\n        expect(error).to.be.an('error');\n        if (error instanceof Error) {\n          expect(error.message).to.equal('Not implemented');\n        } else {\n          expect.fail('Unexpected error type');\n        }\n      }\n    });\n\n    it('should throw \"Not implemented\" for updatePull', async () => {\n      try {\n        await client.updatePull({ owner: 'test', repo: 'test', pullNumber: 1, title: 'Test', body: 'Test' });\n        expect.fail('Expected method to throw');\n      } catch (error) {\n        expect(error).to.be.an('error');\n        if (error instanceof Error) {\n          expect(error.message).to.equal('Not implemented');\n        } else {\n          expect.fail('Unexpected error type');\n        }\n      }\n    });\n\n    it('should throw \"Not implemented\" for createPull', async () => {\n      try {\n        await client.createPull({ owner: 'test', repo: 'test', base: 'main', head: 'feature', title: 'Test', body: 'Test' });\n        expect.fail('Expected method to throw');\n      } catch (error) {\n        expect(error).to.be.an('error');\n        if (error instanceof Error) {\n          expect(error.message).to.equal('Not implemented');\n        } else {\n          expect.fail('Unexpected error type');\n        }\n      }\n    });\n  });\n\n  describe('OctokitClient', () => {\n    let client: OctokitClient;\n    let octokitStub: {\n    pulls: {\n      list: sinon.SinonStub;\n      update: sinon.SinonStub;\n      create: sinon.SinonStub;\n    };\n    paginate: sinon.SinonStub;\n    request: sinon.SinonStub;\n  };\n\n    beforeEach(() => {\n      octokitStub = {\n        pulls: {\n          list: sinon.stub(),\n          update: sinon.stub(),\n          create: sinon.stub()\n        },\n        paginate: sinon.stub(),\n        request: sinon.stub()\n      };\n\n      client = new OctokitClient('test-token');\n      (client as any).octokit = octokitStub;\n    });\n\n    it('should call octokit.pulls.list for listPulls', async () => {\n      const params = { owner: 'test', repo: 'test', base: 'main', head: 'feature' };\n      await client.listPulls(params);\n      expect(octokitStub.pulls.list.calledOnceWith(params)).to.equal(true);\n    });\n\n    it('should call octokit.pulls.update for updatePull', async () => {\n      const params = { owner: 'test', repo: 'test', pullNumber: 1, title: 'Test', body: 'Test' };\n      await client.updatePull(params);\n      expect(octokitStub.pulls.update.calledOnceWith(params)).to.equal(true);\n    });\n\n    it('should call octokit.pulls.create for createPull', async () => {\n      const params = { owner: 'test', repo: 'test', base: 'main', head: 'feature', title: 'Test', body: 'Test' };\n      await client.createPull(params);\n      expect(octokitStub.pulls.create.calledOnceWith(params)).to.equal(true);\n    });\n  });\n\n  describe('GhClient', () => {\n    let client: GhClient;\n    let execSyncStub: sinon.SinonStub;\n\n    beforeEach(() => {\n      execSyncStub = sinon.stub(childProcess, 'execSync');\n      client = new GhClient();\n    });\n\n    afterEach(() => {\n      execSyncStub.restore();\n    });\n\n    it('should call gh cli for listPulls', async () => {\n      execSyncStub.returns(Buffer.from('[{\"number\": 1}]'));\n      const result = await client.listPulls({ owner: 'test', repo: 'test', base: 'main', head: 'feature' });\n      expect(execSyncStub.calledOnce).to.equal(true);\n      expect(execSyncStub.firstCall.args[0]).to.include('gh pr list');\n      expect(result).to.deep.equal([{ number: 1 }]);\n    });\n\n    it('should call gh cli for updatePull', async () => {\n      execSyncStub.returns(Buffer.from(''));\n      await client.updatePull({ owner: 'test', repo: 'test', pullNumber: 1, title: 'Test', body: 'Test' });\n      expect(execSyncStub.calledOnce).to.equal(true);\n      expect(execSyncStub.firstCall.args[0]).to.include('gh pr edit');\n    });\n\n    it('should call gh cli for createPull', async () => {\n      execSyncStub.returns(Buffer.from('https://github.com/test/test/pull/1'));\n      const result = await client.createPull({ owner: 'test', repo: 'test', base: 'main', head: 'feature', title: 'Test', body: 'Test' });\n      expect(execSyncStub.calledOnce).to.equal(true);\n      expect(execSyncStub.firstCall.args[0]).to.include('gh pr create');\n      expect(result).to.deep.equal({ data: { html_url: 'https://github.com/test/test/pull/1' } });\n    });\n\n    it('should escape shell arguments', async () => {\n      execSyncStub.returns(Buffer.from('https://github.com/test/test/pull/1'));\n      await client.createPull({ owner: 'test', repo: 'test', base: 'main', head: 'feature', title: 'Test`with`backticks', body: 'Test`body' });\n      const callArg = execSyncStub.firstCall.args[0] as string;\n      expect(callArg).to.include('\\'Test\\\\`with\\\\`backticks\\'');\n      expect(callArg).to.include('\\'Test\\\\`body\\'');\n    });\n\n    it('should handle errors from gh cli', async () => {\n      execSyncStub.throws(new Error('CLI Error'));\n\n      try {\n        await client.listPulls({ owner: 'test', repo: 'test', base: 'main', head: 'feature' });\n        expect.fail('Expected method to throw');\n      } catch (error) {\n        expect(error).to.be.an('error');\n        if (error instanceof Error) {\n          expect(error.message).to.equal('CLI Error');\n        } else {\n          expect.fail('Unexpected error type');\n        }\n      }\n\n      try {\n        await client.updatePull({ owner: 'test', repo: 'test', pullNumber: 1, title: 'Test', body: 'Test' });\n        expect.fail('Expected method to throw');\n      } catch (error) {\n        expect(error).to.be.an('error');\n        if (error instanceof Error) {\n          expect(error.message).to.equal('CLI Error');\n        } else {\n          expect.fail('Unexpected error type');\n        }\n      }\n\n      try {\n        await client.createPull({ owner: 'test', repo: 'test', base: 'main', head: 'feature', title: 'Test', body: 'Test' });\n        expect.fail('Expected method to throw');\n      } catch (error) {\n        expect(error).to.be.an('error');\n        if (error instanceof Error) {\n          expect(error.message).to.equal('CLI Error');\n        } else {\n          expect.fail('Unexpected error type');\n        }\n      }\n    });\n\n    it('should handle empty output from gh cli', async () => {\n      execSyncStub.returns(Buffer.from(''));\n\n      const listResult = await client.listPulls({ owner: 'test', repo: 'test', base: 'main', head: 'feature' });\n      expect(listResult).to.deep.equal([]);\n\n      await client.updatePull({ owner: 'test', repo: 'test', pullNumber: 1, title: 'Test', body: 'Test' });\n      // No assertion needed for updatePull as it doesn't return anything\n\n      const createResult = await client.createPull({ owner: 'test', repo: 'test', base: 'main', head: 'feature', title: 'Test', body: 'Test' });\n      expect(createResult).to.deep.equal({ data: { html_url: '' } });\n    });\n\n    it('should handle invalid JSON output from gh cli for listPulls', async () => {\n      execSyncStub.returns(Buffer.from('Invalid JSON'));\n\n      try {\n        await client.listPulls({ owner: 'test', repo: 'test', base: 'main', head: 'feature' });\n        expect.fail('Expected method to throw');\n      } catch (error) {\n        expect(error).to.be.an('error');\n        if (error instanceof Error) {\n          expect(error.message).to.include('Unexpected token');\n        } else {\n          expect.fail('Unexpected error type');\n        }\n      }\n    });\n\n    it('should include title and body in updatePull command when provided', async () => {\n      execSyncStub.returns(Buffer.from(''));\n      await client.updatePull({\n        owner: 'test',\n        repo: 'test',\n        pullNumber: 1,\n        title: 'New Title',\n        body: 'New Body'\n      });\n      expect(execSyncStub.calledOnce).to.equal(true);\n      const callArg = execSyncStub.firstCall.args[0] as string;\n      expect(callArg).to.include('--title \\'New Title\\'');\n      expect(callArg).to.include('--body \\'New Body\\'');\n    });\n\n    it('should not include title and body in updatePull command when not provided', async () => {\n      execSyncStub.returns(Buffer.from(''));\n      await client.updatePull({\n        owner: 'test',\n        repo: 'test',\n        pullNumber: 1\n      });\n      expect(execSyncStub.calledOnce).to.equal(true);\n      const callArg = execSyncStub.firstCall.args[0] as string;\n      expect(callArg).to.not.include('--title');\n      expect(callArg).to.not.include('--body');\n    });\n\n    it('should include body in createPull command when provided', async () => {\n      execSyncStub.returns(Buffer.from('https://github.com/test/test/pull/1'));\n      await client.createPull({\n        owner: 'test',\n        repo: 'test',\n        base: 'main',\n        head: 'feature',\n        title: 'Test',\n        body: 'Test Body'\n      });\n      expect(execSyncStub.calledOnce).to.equal(true);\n      const callArg = execSyncStub.firstCall.args[0] as string;\n      expect(callArg).to.include('--body \\'Test Body\\'');\n    });\n\n    it('should not include body in createPull command when not provided', async () => {\n      execSyncStub.returns(Buffer.from('https://github.com/test/test/pull/1'));\n      await client.createPull({\n        owner: 'test',\n        repo: 'test',\n        base: 'main',\n        head: 'feature',\n        title: 'Test'\n      });\n      expect(execSyncStub.calledOnce).to.equal(true);\n      const callArg = execSyncStub.firstCall.args[0] as string;\n      expect(callArg).to.not.include('--body');\n    });\n  });\n});\n"]}